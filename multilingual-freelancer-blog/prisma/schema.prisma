// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  language  String   @default("zh")
  theme     String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  contents          Content[]
  projects          Project[]
  profileTranslations ProfileTranslation[]
  messages          Message[]
  skills            Skill[]
}

// 内容模型
model Content {
  id             String   @id @default(uuid())
  userId         String
  slug           String   @unique
  defaultLanguage String
  published      Boolean  @default(false)
  publishedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 关联
  user         User               @relation(fields: [userId], references: [id])
  translations ContentTranslation[]
  categories   CategoriesOnContents[]
}

// 内容翻译模型
model ContentTranslation {
  id        String   @id @default(uuid())
  contentId String
  language  String
  title     String
  content String @db.Text
  seoTitle  String
  seoDesc   String
  seoKeywords String
  ogImage   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  contentRelation Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, language])
}

// 项目模型
model Project {
  id             String   @id @default(uuid())
  userId         String
  slug           String   @unique
  defaultLanguage String
  githubUrl      String?
  liveUrl        String?
  completionDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 关联
  user         User                @relation(fields: [userId], references: [id])
  translations ProjectTranslation[]
  media        Media[]
}

// 项目翻译模型
model ProjectTranslation {
  id          String   @id @default(uuid())
  projectId   String
  language    String
  title       String
  description String @db.Text
  seoTitle    String
  seoDesc     String
  seoKeywords String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  projectRelation Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, language])
}

// 媒体模型
model Media {
  id        String   @id @default(uuid())
  projectId String
  type      String
  url       String
  altText   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// 技能模型
model Skill {
  id        String   @id @default(uuid())
  userId    String
  name      String
  level     Int
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  user User @relation(fields: [userId], references: [id])
}

// 个人资料翻译模型
model ProfileTranslation {
  id         String   @id @default(uuid())
  userId     String
  language   String
  title      String
  bio String @db.Text
  services String @db.Text
  seoTitle   String
  seoDesc    String
  seoKeywords String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 关联
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, language])
}

// 消息模型
model Message {
  id           String   @id @default(uuid())
  userId       String
  senderName   String
  senderEmail  String
  language     String
  subject      String
  content String @db.Text
  isJobInquiry Boolean  @default(false)
  status       String   @default("unread")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联
  user User @relation(fields: [userId], references: [id])
}

// 分类模型
model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  contents CategoriesOnContents[]
}

// 内容与分类的多对多关系
model CategoriesOnContents {
  contentId  String
  categoryId String
  createdAt  DateTime @default(now())

  // 关联
  content  Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([contentId, categoryId])
}
