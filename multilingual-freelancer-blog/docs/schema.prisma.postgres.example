// PostgreSQL版本的Prisma Schema示例文件
// 用于Vercel部署

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  language  String   @default("zh")
  theme     String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contents           Content[]
  projects           Project[]
  skills             Skill[]
  profileTranslations ProfileTranslation[]
}

// 内容模型（博客文章等）
model Content {
  id             String   @id @default(uuid())
  userId         String
  slug           String
  defaultLanguage String
  published      Boolean  @default(false)
  publishedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User                @relation(fields: [userId], references: [id])
  translations ContentTranslation[]
}

// 内容翻译
model ContentTranslation {
  id          String   @id @default(uuid())
  contentId   String
  language    String
  title       String
  content     String   @db.Text
  seoTitle    String
  seoDesc     String
  seoKeywords String
  ogImage     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// 项目模型（作品集）
model Project {
  id             String    @id @default(uuid())
  userId         String
  slug           String
  defaultLanguage String
  githubUrl      String?
  liveUrl        String?
  completionDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User                 @relation(fields: [userId], references: [id])
  translations ProjectTranslation[]
  media        Media[]
}

// 项目翻译
model ProjectTranslation {
  id          String   @id @default(uuid())
  projectId   String
  language    String
  title       String
  description String   @db.Text
  seoTitle    String
  seoDesc     String
  seoKeywords String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// 媒体文件（图片、视频）
model Media {
  id        String   @id @default(uuid())
  projectId String
  type      String
  url       String
  altText   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// 技能模型
model Skill {
  id        String   @id @default(uuid())
  userId    String
  name      String
  level     Int
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// 个人资料翻译
model ProfileTranslation {
  id        String   @id @default(uuid())
  userId    String
  language  String
  title     String
  bio       String   @db.Text
  services  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// 联系消息
model Message {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 内容分类
model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  translations CategoryTranslation[]
}

// 分类翻译
model CategoryTranslation {
  id         String   @id @default(uuid())
  categoryId String
  language   String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}